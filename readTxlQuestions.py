# Script by Matt Postiff, (c) 2024
# Read in XML file provided by S. Homes of Bibles International and
# spit it back out in a more plain-text format useful for their
# work.

import xml.etree.ElementTree as ET

# Specify the filename of your XML file
filename = 'TxlQuestions.xml'

# Parse the XML file
try:
  tree = ET.parse(filename)
except FileNotFoundError:
  print(f"Error: File '{filename}' not found.")
  exit()

# Get the root element of the tree
root = tree.getroot()

for child in root:
  if child.attrib:
    heading = child.attrib['heading'] # heading is the Bible reference and sometimes a title as well

    # Next two levels of nesting are Categories and then Category, where 
    # the Category can be either Overview or Details, so print that next
    # to the heading we just printed above.
    questionType = child[0][0].attrib['type']
    print(f"<h2>{questionType}: {heading}</h2>")

    # The next nested data is a list of questions
    for question in child[0][0]:
      #print(question.attrib)
      #print(type(question.attrib)) <== <class 'dict'>
      if (questionType == "Overview"):
        # The data does not contain a scrref as the questions are relevant to a larger section
        pass
      elif (questionType == "Details"):
          print(f"{question.attrib['scrref']}")

      # Now to print the question and answer
      for data in question: # same as for data in child[0][0], which is itself a nested list...
        # data.tag is Q or A and data.text is the question itself.
        # In some cases, data.tag is "Note" and data.text are further notes about the previous question
        print("<p>", "\t", "<b>", data.tag, "</b>", data.text, "</p>")

# Above is the script. Below is text generated by Google Gemini AI chat 
# when prompted with "write python code to read an xml file". I used it
# as a tutorial and starting point for the above.

# Print the tag of the root element
#print(f"Root element: {root.tag}")

# Accessing elements and attributes
# This is a basic example, you'll need to modify it based on your XML structure
#for child in root:
#  print(f"Child tag: {child.tag}")
  #print(f"Type of child: {type(child)}") # <== <class 'xml.etree.ElementTree.Element'>
  # Accessing attributes
#  if child.attrib:
#    for key, value in child.attrib.items():
#      print(f"  Attribute: {key} = {value}")
  # Accessing text content
#  print(f"  Text content: {child.text}")

# You can iterate through the tree structure and access elements and attributes
# based on your specific needs using methods like findall, find, iter

#print("-" * 20)
#print("Example: Find all elements with a specific tag")

# Modify this example based on your desired tag
#specific_tag = "item"
#elements = root.findall(specific_tag)

#for element in elements:
#  print(f"Element: {element.tag}")
  # Access attributes and text content as before